{
  "openapi": "3.0.0",
  "info": {
    "title": "Job management API",
    "version": "1.0.0",
    "description": "API for creating job configurations and running jobs. User must have privilege on respective Project to execute these APIs."
  },
  "servers": [
    {
      "url": "{accelqLoginUrl}/awb/api/2.0/{tenantCode}/{projectCode}",
      "variables": {
        "accelqLoginUrl": {
          "default": "",
          "description": "Base URL for AccelQ login"
        },
        "tenantCode": {
          "default": "your-tenant",
          "description": "Tenant code for identifying the organization."
        },
        "projectCode": {
          "default": "your-project",
          "description": "Project code for identifying the project within the tenant."
        }
      }
    }
  ],
  "paths": {
    "/test-exec/jobs/recurring": {
      "post": {
        "tags": ["Jobs"],
        "summary": "Create a new Recurring Test Job",
        "description": "Creates a new recurring test job for the specified project based on the provided job configuration. This API sets up a recurrence template for the job, with actual job runs being triggered automatically when the specified recurrence conditions are met.",
        "operationId": "createRecurringTestJob",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recurrenceInfo": {
                    "type": "object",
                    "properties": {
                      "DTSTART": {
                        "type": "string",
                        "example": "2024-04-21T10:30",
                        "description": "Specifies the start time in ISO 8601 format from which recurrence condition will be considered. Defaults to current timestamp if not provided."
                      },
                      "RRULE": {
                        "type": "string",
                        "example": "FREQ=WEEKLY;INTERVAL=2;BYDAY=TU,TH,SA;COUNT=6",
                        "examples": [
                          "FREQ=HOURLY;INTERVAL=3;UNTIL=2024-05-04T11:30",
                          "FREQ=DAILY;INTERVAL=3;COUNT=4",
                          "FREQ=MONTHLY;BYMONTHDAY=4;COUNT=10",
                          "FREQ=MONTHLY;BYDAY=2MO;UNTIL2025-05-21T12:00"
                        ],
                        "description": "</br> Specifies recurrence rule pattern.  </br> Supported RRULE patterns are : </br> </br> FREQ=HOURLY(;INTERVAL=(\\d+))?(;COUNT=(\\d+))?(;UNTIL=yyyy-MM-DD'T'HH:mm)? </br> </br> FREQ=DAILY(;INTERVAL=(\\d+))?(;COUNT=(\\d+))?(;UNTIL=yyyy-MM-DD'T'HH:mm)? </br> </br> FREQ=WEEKLY(;INTERVAL=\\d+)?(;BYDAY=(MO|TU|WE|TH|FR|SA|SU)(,(MO|TU|WE|TH|FR|SA|SU))*)?(;COUNT=(\\d+))?(;UNTIL=yyyy-MM-DD'T'HH:mm)? </br> </br> FREQ=MONTHLY;BYMONTHDAY=(-1|[1-30])(;COUNT=(\\d+))?(;UNTIL=yyyy-MM-DD'T'HH:mm)? </br> </br> FREQ=MONTHLY;BYDAY=(-1|[1-4])(MO|TU|WE|TH|FR|SA|SU)(;COUNT=(\\d+))?(;UNTIL=yyyy-MM-DD'T'HH:mm)?"
                      },
                      "timeZone": {
                        "type": "string",
                        "example": "+05:30",
                        "description": "Specifies the offset with UTC timezone. Defaults to UTC time if not provided.Allowed format is (+/-)HH:mm ."
                      }
                    }
                  },
                  "runEntityType": {
                    "type": "string",
                    "enum": ["SCENARIO", "TEST_SUITE"],
                    "description": "Specifies the type of entity to be run. Accepted values are 'SCENARIO', 'TEST_SUITE'."
                  },
                  "scnPid": {
                    "type": "number",
                    "example": "15",
                    "description": "The PID of the scenario to be executed. This is a mandatory field when runEntity is set to SCENARIO and must reference an existing scenario in the project."
                  },
                  "testSuitePid": {
                    "type": "number",
                    "example": null,
                    "description": "The PID of the test suite to be executed. This is a mandatory field when runEntity is set to TEST_SUITE and must reference an existing test suite in the project."
                  },
                  "purpose": {
                    "type": "string",
                    "example": "ACME INC ticket booking.",
                    "description": "Specifies the purpose of job creation. Defaults to the scenario name or test suite name if not explicitly provided."
                  },
                  "appEnvironmentName": {
                    "type": "string",
                    "example": "Staging",
                    "description": "Name of the environment where test execution to take place. Must reference to an existing app environment in the project."
                  },
                  "screenshotMode": {
                    "type": "string",
                    "example": "OPTIMAL",
                    "description": "Specifies the mode to capture screenshot during test execution. Accepted values are 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                  },
                  "loggerLevel": {
                    "type": "string",
                    "example": "STANDARD",
                    "description": "Specifiesthe mode to log the event during test execution. Accepted values are 'STANDARD', 'VERBOSE','ERROR'."
                  },
                  "runProperties": {
                    "type": "object",
                    "properties": {
                      "todayPrice": {
                        "type": "string",
                        "example": "2000"
                      },
                      "totalTest": {
                        "type": "string",
                        "example": "5"
                      }
                    },
                    "description": "Specifies run properties json associated to the scenario with name of run property as the key and value as assigned corresponding run property value."
                  },
                  "executionParameters": {
                    "type": "object",
                    "properties": {
                      "retryCount": {
                        "type": "string",
                        "example": 2
                      },
                      "platform": {
                        "type": "string",
                        "example": "windows"
                      }
                    },
                    "description": "Specifies executionParameters associated to the project with name of execution parameter name as the key and value as assigned corresponding parameter value."
                  },
                  "timeOuts": {
                    "type": "object",
                    "properties": {
                      "pageLoadWaitTime": {
                        "type": "number",
                        "example": "50",
                        "description": "Maximum wait time (in seconds) for page or screen load. Defaults to 60 seconds if not provided."
                      },
                      "elementWaitTime": {
                        "type": "number",
                        "example": "40",
                        "description": "Maximum wait time (in seconds) for an element to render on screen. Defaults to 30 seconds if not provided."
                      },
                      "apiTimeout": {
                        "type": "number",
                        "example": "60",
                        "description": "Maximum wait time (in seconds) for each call in API tests. Defaults to 60 seconds if not provided."
                      }
                    }
                  },
                  "agentInfo": {
                    "type": "object",
                    "properties": {
                      "agentSelectionType": {
                        "type": "string",
                        "example": "BY_AVAILABILITY",
                        "enum": ["BY_NAME", "BY_AVAILABILITY"],
                        "description": "Defines the mode for selecting an agent for test execution.Allowed values are : 'BY_NAME','BY_AVAILABILITY'. Remote vendor test execution is not supported with agentSelectionType as 'BY_AVAILABILITY'."
                      },
                      "agentNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["PROD_agent-1", "PROD_agent-2"],
                        "description": "Specifies the names list of the agents to be used for test execution. The provided names must correspond to a running agent. mandatory with agentSelectionType as 'BY_NAME'."
                      },
                      "agentByAvailabilityInfo": {
                        "type": "object",
                        "properties": {
                          "namePattern": {
                            "type": "string",
                            "example": null,
                            "description": "Specifies the pattern to match any agent, any of available agents which matches the pattern will pick the job for execution."
                          },
                          "agentCountForJobDistribution": {
                            "type": "number",
                            "example": 3,
                            "description": "Specifies number of Agents to distribute the job. Defaults to 1 if not provided."
                          }
                        }
                      },
                      "numOfParallelRuns": {
                        "type": "number",
                        "example": 2,
                        "description": "Specifies the number of parallel test cases to run on the agent. Defaults to 1 if not provided."
                      },
                      "browserExecution": {
                        "type": "object",
                        "properties": {
                          "browser": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "EDGE",
                                "description": "Specifies the browser for test execution. Defaults to CHROME if not provided."
                              },
                              "version": {
                                "type": "string",
                                "example": "12.54"
                              }
                            }
                          },
                          "targetDeviceType": {
                            "type": "string",
                            "enum": ["DESKTOP", "MOBILE"],
                            "example": "MOBILE",
                            "description": "Specifies the device type on which browser execution to happen."
                          },
                          "desktopDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "11",
                                "description": "Version of the operating system of execution environment."
                              },
                              "emulatedDeviceName": {
                                "type": "string",
                                "example": "Android Phone 393 x 851",
                                "description": "Specifies the name of the device to emulate with desired resolution."
                              }
                            },
                            "example": null
                          },
                          "mobileDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "15",
                                "description": "Version of the operating system of execution environment."
                              },
                              "deviceName": {
                                "type": "string",
                                "example": "iPhone 15 Pro",
                                "description": "Name of the mobile device to test on mobile browser."
                              },
                              "udid": {
                                "type": "string",
                                "description": "Unique device identifier id of the connected device. Mandatory when connected to mobile device and can be located in the agent dashboard once the device is physically connected.",
                                "example": "1d97ec4fa8ae99f00e07f9c913c368cf6071a978"
                              },
                              "isRealDevice": {
                                "type": "boolean",
                                "example": "true"
                              },
                              "webDriverAgentUrl": {
                                "type": "string",
                                "example": null,
                                "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system and can be located in the agent dashboard once the device is physically connected."
                              }
                            }
                          },
                          "browserKeepAlive": {
                            "type": "boolean",
                            "example": true,
                            "description": "Specifies whether to keep the browser session alive during test execution or not. Defaults to false if not provided."
                          },
                          "enableWebAccessibilityTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Verifies accessibility compliance of different application pages according to established standards. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "enableWebPerformanceTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Measures and verifies web performance of different application pages to be satisfactory as per the established baseline. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "webPerformanceSlaThreshold": {
                            "type": "number",
                            "example": "10",
                            "description": "SLA Tolerance can be specified to account for environment-specific performance differences in different application environments where the test is executing. Defaults to 0 if not provided."
                          },
                          "webDriverProfileName": {
                            "type": "string",
                            "example": "Web Driver Profile 1",
                            "description": "Provide custom browser configurations to invoke browser. If provided then it must reference to existing web driver profile in the project."
                          }
                        }
                      },
                      "mobileAppTesting": {
                        "type": "object",
                        "properties": {
                          "mobileExecutionDevices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "refName": {
                                  "type": "string",
                                  "example": "device 1",
                                  "description": "Name of the device to reference the device used in the Scenario steps with multi device testing. Mandatory with multiple devices."
                                },
                                "deviceName": {
                                  "type": "string",
                                  "example": "Iphone 15",
                                  "description": "name of device."
                                },
                                "os": {
                                  "type": "string",
                                  "example": "ios",
                                  "description": "operating system of the mobile device."
                                },
                                "osVersion": {
                                  "example": "15",
                                  "description": "Os Version of mobile device."
                                },
                                "appiumDriverUrl": {
                                  "type": "string",
                                  "example": "http://localhost:4723",
                                  "description": "url of the appium server. Required for mobile testing."
                                },
                                "webDriverAgentUrl": {
                                  "type": "string",
                                  "example": "127.0.0.1:50092",
                                  "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system."
                                }
                              }
                            },
                            "exmaples": [
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              },
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              }
                            ]
                          },
                          "mobileDriverProfileName": {
                            "type": "string",
                            "example": "Mobile Driver Profile 3",
                            "description": "Provides custom testing environment configurations with mobile testing. If provided then it must reference to existing mobile driver profile in the project."
                          },
                          "mobileKeepAlive": {
                            "type": "boolean",
                            "example": false,
                            "description": "Specifies whether to keep the mobile session alive during test execution or not. Defaults to false if not provided."
                          },
                          "skipReinstall": {
                            "type": "boolean",
                            "example": "false",
                            "description": "By enabling this option, AccelQ skips the installation process if the app is already installed on the device. Default value is false."
                          }
                        }
                      }
                    }
                  },
                  "enableSelfHealing": {
                    "type": "boolean",
                    "example": true,
                    "description": "Enables self healing on element ID failures. Default value is true."
                  },
                  "notifications": {
                    "type": "object",
                    "properties": {
                      "notifyOnStart": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notifyOnCompletion": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notificationMode": {
                        "type": "string",
                        "example": "ON ERROR",
                        "description": "Specifies the case where notification email to be sent. Accepted values are 'NONE','ALWAYS','ON ERROR'. Defaults to 'NONE' if not provided."
                      },
                      "notificationEmails": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["demo1@acmeInc.com", "demo2@acmeInc.com"]
                      },
                      "notificationChannels": {
                        "type": "object",
                        "properties": {
                          "slackChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["Slack-channel-1"]
                          },
                          "teamsChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["QA-Team", "PKN-team"]
                          }
                        }
                      }
                    }
                  },
                  "autoRerun": {
                    "type": "object",
                    "properties": {
                      "failurePercentageLimit": {
                        "type": "number",
                        "example": "10",
                        "description": "Specifies the threshold failure percentage to trigger an auto re-run."
                      },
                      "maxRerunAttempts": {
                        "type": "number",
                        "example": 5,
                        "description": "Specifies total number of maximum reruns attempts."
                      },
                      "delayBetweenRerun": {
                        "type": "number",
                        "example": 3,
                        "description": "Specifies delay between each Re-run attempt in minutes."
                      },
                      "rerunOnNoImprovement": {
                        "type": "boolean",
                        "example": false,
                        "description": "Indicates whether to rerun or not if previous rerun has no improvement."
                      }
                    }
                  },
                  "setup": {
                    "type": "object",
                    "properties": {
                      "testCaseSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "14"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "configPath",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "/configs/settings.json",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "configPath",
                                "valueType": "LITERAL",
                                "value": "/configs/settings.json"
                              },
                              {
                                "name": "maxRetries",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 2"
                              }
                            ]
                          }
                        }
                      },
                      "testJobSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "19"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "retryCount",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "3",
                                  "description": "Stores the values to be assigned to the action input parameter."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "retryCount",
                                "value": "3"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "teardown": {
                    "type": "object",
                    "properties": {
                      "testCaseTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "13"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "filePath",
                                "valueType": "LITERAL",
                                "value": "/users/data.csv"
                              },
                              {
                                "name": "transactionLimit",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 1"
                              }
                            ]
                          }
                        }
                      },
                      "testJobTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "18"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "userAge",
                                "value": "21"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job creation successfull.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobPid": {
                      "type": "number",
                      "example": 42
                    },
                    "message": {
                      "example": "Recurring Test Job created successfully."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User does not have authorization",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "invalidUser": {
                    "summary": "Invalid user",
                    "value": {
                      "error": "User does not exist."
                    }
                  },
                  "invalidCreds": {
                    "summary": "Unauthorized access",
                    "value": {
                      "error": "User not Authorized."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request Error",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "invalidTimezone": {
                    "summary": "Timezone Invalid",
                    "value": {
                      "error": "Provided timeZone is not accepted UTC offset. Accepted format is (+/-)HH:mm"
                    }
                  },
                  "invalidDTSTART": {
                    "summary": "Invalid DTSTART format",
                    "value": "DTSTART format is invalid. Accepted format is yyyy-MM-DD'T'HH:mm"
                  },
                  "invalidDTSTART2": {
                    "summary": "Invalid DTSTART value",
                    "value": "DTSTART time must be set to the current time or a future time."
                  },
                  "invalidRRULE": {
                    "summary": "invalidRRULE",
                    "value": {
                      "error": "Provided RRULE format is not supported. Please refer to API documentation for supported format of RRULE."
                    }
                  },
                  "invalidRunEntityType": {
                    "summary": "Invalid Run Entity Type",
                    "value": {
                      "error": "Invalid runEntityType provided. Accepted values are : 'SCENARIO', 'TEST_SUITE'."
                    }
                  },
                  "ScnPidMissing": {
                    "summary": "Scn Pid missing",
                    "value": {
                      "error": "Scn Pid is required for scenario run."
                    }
                  },
                  "testSuitePidMissing": {
                    "summary": "Test suite Pid missing",
                    "value": {
                      "error": "TestSuite Pid is required for test suite run."
                    }
                  },
                  "invalidPurpose": {
                    "summary": "Purpose character limit exceeded",
                    "value": {
                      "error": "Maximum of 256 characters are allowed in purpose"
                    }
                  },
                  "appEnvironmentName": {
                    "summary": "appEnvironmentName missing",
                    "value": {
                      "error": "App Environment is required to create test job."
                    }
                  },
                  "invalidScreenshotMode": {
                    "summary": "Screenshot mode is invalid",
                    "value": {
                      "error": "Screenshot mode is invalid. Accepted values are : 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                    }
                  },
                  "invalidLoggerLevel": {
                    "summary": "Invalid logger level",
                    "value": {
                      "error": "Invalid logger level provided. Allowed values are : 'STANDARD','VERBOSE','ON_ERROR'."
                    }
                  },
                  "invalidPageTimeout": {
                    "summary": "Page load timeout out of range",
                    "value": {
                      "error": "Allowed range for page load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidElementTimeout": {
                    "summary": "Element load timeout out of range",
                    "value": {
                      "error": "Allowed range for element load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidApiTimeout": {
                    "summary": "API timeout out of range",
                    "value": {
                      "error": "Allowed range for API timeout is from 0 to 300 seconds."
                    }
                  },
                  "agentInfoMissing": {
                    "summary": "Agent Info required",
                    "value": {
                      "error": "Agent Info is required."
                    }
                  },
                  "InvalidAgentSelectionType": {
                    "summary": "Agent Selection Type is required",
                    "value": {
                      "error": "Agent Selection Type is required. Accepted values are : 'BY_NAME', 'BY_AVAILABILITY'."
                    }
                  },
                  "agentNamesRequired": {
                    "summary": "agent names required",
                    "value": {
                      "error": "AgentNames list is required with AgentSelectionType as 'BY_NAME'."
                    }
                  },
                  "agentNameInvalid": {
                    "summary": "Agent name invalid",
                    "value": "Agent with name 'Prod_Agent' is not a running instance."
                  },
                  "invalidAgentCount": {
                    "summary": "Invalid agent Count for job distribution",
                    "value": "agentCountForJobDistribution must be greater than or equal to 1."
                  },
                  "invalidNotificationMode": {
                    "summary": "Invalid notification mode",
                    "value": {
                      "error": "Invalid notification mode. Accepted values are 'NONE','ALWAYS', 'ON ERROR'."
                    }
                  },
                  "maxRerunAttempsInvalid": {
                    "summary": "Invalid maxRerunAttempts",
                    "value": {
                      "error": "The allowed range for maxRerunAttempts is from 1 to 9."
                    }
                  },
                  "invalidFailurePercentageLimit": {
                    "summary": "Invalid failure Percentage limit",
                    "value": {
                      "error": "The allowed range for failurePercentageLimit is from 0 to 99."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "examples": {
                  "scenarioNotFound": {
                    "summary": "Scenario not found",
                    "value": {
                      "error": "Scenario with Pid 15 does not exists in the project."
                    }
                  },
                  "testSuiteNotFound": {
                    "summary": "Test suite not found",
                    "value": {
                      "error": "Test suite with pid 9 does not exists in the project."
                    }
                  },
                  "appEnvironmentNotFound": {
                    "summary": "App Environment not found",
                    "value": {
                      "error": "App Environment with name 'Staging' does not exists in the project."
                    }
                  },
                  "runPropertyNotFound": {
                    "summary": "Run Property not found",
                    "value": {
                      "error": "Run Property with name 'TotalTests' does not exists in the project."
                    }
                  },
                  "ExecutionParameterNotFound": {
                    "summary": "Execution Parameter not found",
                    "value": {
                      "error": "Execution Paramter with name 'platform' does not exists in the project."
                    }
                  },
                  "agentNotFound": {
                    "summary": "Agent not found",
                    "value": {
                      "error": "Agent with name 'Prod_agent' is not a running instance."
                    }
                  },
                  "webDriverNotFound": {
                    "summary": "Web driver Profile not found",
                    "value": {
                      "error": "Web driver Profile with name 'Driver profile 1' does not exists in the project."
                    }
                  },
                  "mobileDriverNotFound": {
                    "summary": "Mobile driver profile not found",
                    "value": {
                      "error": "Mobile driver profile with name 'Driver profile 3' does not exists in the project."
                    }
                  },
                  "emulatedDeviceNotfound": {
                    "summary": "Emulated device not found",
                    "value": {
                      "error": "Emulated device with name 'Android Phone 393 x 799' does not exists in the project."
                    }
                  },
                  "slackChannelNotFound": {
                    "summary": "Slack channel not found",
                    "value": {
                      "error": "Slack channel with name 'Slack channel 1' does not configured to this project."
                    }
                  },
                  "teamsChannelNotFound": {
                    "summary": "Teams channel not found",
                    "value": {
                      "error": "Teams channel with name 'QA-team' does not configured to this project."
                    }
                  },
                  "teardownTjCompNotFound": {
                    "summary": "TearDown action does not exist",
                    "value": {
                      "error": "Tear down Action with pid : 25 does not exists in the project."
                    }
                  },
                  "globalPropertyNotFound": {
                    "summary": "Global Property not found.",
                    "value": {
                      "error": "Global property with name 'GP 1' does not exist in the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/test-exec/jobs/run": {
      "post": {
        "tags": ["Jobs"],
        "summary": "Configure and Run a new Test Job instantly",
        "description": "Initiates a test job immediately with the specified project configuration. The job begins execution as soon as an agent becomes available.",
        "operationId": "runTestJob",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "runEntityType": {
                    "type": "string",
                    "enum": ["SCENARIO", "TEST_SUITE"],
                    "description": "Specifies the type of entity to be run. Accepted values are 'SCENARIO', 'TEST_SUITE'."
                  },
                  "scnPid": {
                    "type": "number",
                    "example": "15",
                    "description": "The PID of the scenario to be executed. This is a mandatory field when runEntity is set to SCENARIO and must reference an existing scenario in the project."
                  },
                  "testSuitePid": {
                    "type": "number",
                    "example": null,
                    "description": "The PID of the test suite to be executed. This is a mandatory field when runEntity is set to TEST_SUITE and must reference an existing test suite in the project."
                  },
                  "purpose": {
                    "type": "string",
                    "example": "ACME INC ticket booking.",
                    "description": "Specifies the purpose of job creation. Defaults to the scenario name or test suite name if not explicitly provided."
                  },
                  "appEnvironmentName": {
                    "type": "string",
                    "example": "Staging",
                    "description": "Name of the environment where test execution to take place. Must reference to an existing app environment in the project."
                  },
                  "screenshotMode": {
                    "type": "string",
                    "example": "OPTIMAL",
                    "description": "Specifies the mode to capture screenshot during test execution. Accepted values are 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                  },
                  "loggerLevel": {
                    "type": "string",
                    "example": "STANDARD",
                    "description": "Specifiesthe mode to log the event during test execution. Accepted values are 'STANDARD', 'VERBOSE','ERROR'."
                  },
                  "runProperties": {
                    "type": "object",
                    "properties": {
                      "todayPrice": {
                        "type": "string",
                        "example": "2000"
                      },
                      "totalTest": {
                        "type": "string",
                        "example": "5"
                      }
                    },
                    "description": "Specifies run properties json associated to the scenario with name of run property as the key and value as assigned corresponding run property value."
                  },
                  "executionParameters": {
                    "type": "object",
                    "properties": {
                      "retryCount": {
                        "type": "string",
                        "example": 2
                      },
                      "platform": {
                        "type": "string",
                        "example": "windows"
                      }
                    },
                    "description": "Specifies executionParameters associated to the project with name of execution parameter name as the key and value as assigned corresponding parameter value."
                  },
                  "timeOuts": {
                    "type": "object",
                    "properties": {
                      "pageLoadWaitTime": {
                        "type": "number",
                        "example": "50",
                        "description": "Maximum wait time (in seconds) for page or screen load. Defaults to 60 seconds if not provided."
                      },
                      "elementWaitTime": {
                        "type": "number",
                        "example": "40",
                        "description": "Maximum wait time (in seconds) for an element to render on screen. Defaults to 30 seconds if not provided."
                      },
                      "apiTimeout": {
                        "type": "number",
                        "example": "60",
                        "description": "Maximum wait time (in seconds) for each call in API tests. Defaults to 60 seconds if not provided."
                      }
                    }
                  },
                  "agentInfo": {
                    "type": "object",
                    "properties": {
                      "agentSelectionType": {
                        "type": "string",
                        "example": "BY_AVAILABILITY",
                        "enum": ["BY_NAME", "BY_AVAILABILITY"],
                        "description": "Defines the mode for selecting an agent for test execution.Allowed values are : 'BY_NAME','BY_AVAILABILITY'. Remote vendor test execution is not supported with agentSelectionType as 'BY_AVAILABILITY'."
                      },
                      "agentNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["PROD_agent-1", "PROD_agent-2"],
                        "description": "Specifies the names list of the agents to be used for test execution. The provided names must correspond to a running agent. mandatory with agentSelectionType as 'BY_NAME'."
                      },
                      "agentByAvailabilityInfo": {
                        "type": "object",
                        "properties": {
                          "namePattern": {
                            "type": "string",
                            "example": null,
                            "description": "Specifies the pattern to match any agent, any of available agents which matches the pattern will pick the job for execution."
                          },
                          "agentCountForJobDistribution": {
                            "type": "number",
                            "example": 3,
                            "description": "Specifies number of Agents to distribute the job. Defaults to 1 if not provided."
                          }
                        }
                      },
                      "numOfParallelRuns": {
                        "type": "number",
                        "example": 2,
                        "description": "Specifies the number of parallel test cases to run on the agent. Defaults to 1 if not provided."
                      },
                      "browserExecution": {
                        "type": "object",
                        "properties": {
                          "browser": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "EDGE",
                                "description": "Specifies the browser for test execution. Defaults to CHROME if not provided."
                              },
                              "version": {
                                "type": "string",
                                "example": "12.54"
                              }
                            }
                          },
                          "targetDeviceType": {
                            "type": "string",
                            "enum": ["DESKTOP", "MOBILE"],
                            "example": "MOBILE",
                            "description": "Specifies the device type on which browser execution to happen."
                          },
                          "desktopDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "11",
                                "description": "Version of the operating system of execution environment."
                              },
                              "emulatedDeviceName": {
                                "type": "string",
                                "example": "Android Phone 393 x 851",
                                "description": "Specifies the name of the device to emulate with desired resolution."
                              }
                            },
                            "example": null
                          },
                          "mobileDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "15",
                                "description": "Version of the operating system of execution environment."
                              },
                              "deviceName": {
                                "type": "string",
                                "example": "iPhone 15 Pro",
                                "description": "Name of the mobile device to test on mobile browser."
                              },
                              "udid": {
                                "type": "string",
                                "description": "Unique device identifier id of the connected device. Mandatory when connected to mobile device and can be located in the agent dashboard once the device is physically connected.",
                                "example": "1d97ec4fa8ae99f00e07f9c913c368cf6071a978"
                              },
                              "isRealDevice": {
                                "type": "boolean",
                                "example": "true"
                              },
                              "webDriverAgentUrl": {
                                "type": "string",
                                "example": null,
                                "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system and can be located in the agent dashboard once the device is physically connected."
                              }
                            }
                          },
                          "browserKeepAlive": {
                            "type": "boolean",
                            "example": true,
                            "description": "Specifies whether to keep the browser session alive during test execution or not. Defaults to false if not provided."
                          },
                          "enableWebAccessibilityTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Verifies accessibility compliance of different application pages according to established standards. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "enableWebPerformanceTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Measures and verifies web performance of different application pages to be satisfactory as per the established baseline. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "webPerformanceSlaThreshold": {
                            "type": "number",
                            "example": "10",
                            "description": "SLA Tolerance can be specified to account for environment-specific performance differences in different application environments where the test is executing. Defaults to 0 if not provided."
                          },
                          "webDriverProfileName": {
                            "type": "string",
                            "example": "Web Driver Profile 1",
                            "description": "Provide custom browser configurations to invoke browser. If provided then it must reference to existing web driver profile in the project."
                          }
                        }
                      },
                      "mobileAppTesting": {
                        "type": "object",
                        "properties": {
                          "mobileExecutionDevices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "refName": {
                                  "type": "string",
                                  "example": "device 1",
                                  "description": "Name of the device to reference the device used in the Scenario steps with multi device testing. Mandatory with multiple devices."
                                },
                                "deviceName": {
                                  "type": "string",
                                  "example": "Iphone 15",
                                  "description": "name of device."
                                },
                                "os": {
                                  "type": "string",
                                  "example": "ios",
                                  "description": "operating system of the mobile device."
                                },
                                "osVersion": {
                                  "example": "15",
                                  "description": "Os Version of mobile device."
                                },
                                "appiumDriverUrl": {
                                  "type": "string",
                                  "example": "http://localhost:4723",
                                  "description": "url of the appium server. Required for mobile testing."
                                },
                                "webDriverAgentUrl": {
                                  "type": "string",
                                  "example": "127.0.0.1:50092",
                                  "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system."
                                }
                              }
                            },
                            "exmaples": [
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              },
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              }
                            ]
                          },
                          "mobileDriverProfileName": {
                            "type": "string",
                            "example": "Mobile Driver Profile 3",
                            "description": "Provides custom testing environment configurations with mobile testing. If provided then it must reference to existing mobile driver profile in the project."
                          },
                          "mobileKeepAlive": {
                            "type": "boolean",
                            "example": false,
                            "description": "Specifies whether to keep the mobile session alive during test execution or not. Defaults to false if not provided."
                          },
                          "skipReinstall": {
                            "type": "boolean",
                            "example": "false",
                            "description": "By enabling this option, AccelQ skips the installation process if the app is already installed on the device. Default value is false."
                          }
                        }
                      }
                    }
                  },
                  "enableSelfHealing": {
                    "type": "boolean",
                    "example": true,
                    "description": "Enables self healing on element ID failures. Default value is true."
                  },
                  "notifications": {
                    "type": "object",
                    "properties": {
                      "notifyOnStart": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notifyOnCompletion": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notificationMode": {
                        "type": "string",
                        "example": "ON ERROR",
                        "description": "Specifies the case where notification email to be sent. Accepted values are 'NONE','ALWAYS','ON ERROR'. Defaults to 'NONE' if not provided."
                      },
                      "notificationEmails": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["demo1@acmeInc.com", "demo2@acmeInc.com"]
                      },
                      "notificationChannels": {
                        "type": "object",
                        "properties": {
                          "slackChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["Slack-channel-1"]
                          },
                          "teamsChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["QA-Team", "PKN-team"]
                          }
                        }
                      }
                    }
                  },
                  "autoRerun": {
                    "type": "object",
                    "properties": {
                      "failurePercentageLimit": {
                        "type": "number",
                        "example": "10",
                        "description": "Specifies the threshold failure percentage to trigger an auto re-run."
                      },
                      "maxRerunAttempts": {
                        "type": "number",
                        "example": 5,
                        "description": "Specifies total number of maximum reruns attempts."
                      },
                      "delayBetweenRerun": {
                        "type": "number",
                        "example": 3,
                        "description": "Specifies delay between each Re-run attempt in minutes."
                      },
                      "rerunOnNoImprovement": {
                        "type": "boolean",
                        "example": false,
                        "description": "Indicates whether to rerun or not if previous rerun has no improvement."
                      }
                    }
                  },
                  "setup": {
                    "type": "object",
                    "properties": {
                      "testCaseSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "14"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "configPath",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "/configs/settings.json",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "configPath",
                                "valueType": "LITERAL",
                                "value": "/configs/settings.json"
                              },
                              {
                                "name": "maxRetries",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 2"
                              }
                            ]
                          }
                        }
                      },
                      "testJobSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "19"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "retryCount",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "3",
                                  "description": "Stores the values to be assigned to the action input parameter."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "retryCount",
                                "value": "3"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "teardown": {
                    "type": "object",
                    "properties": {
                      "testCaseTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "13"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "filePath",
                                "valueType": "LITERAL",
                                "value": "/users/data.csv"
                              },
                              {
                                "name": "transactionLimit",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 1"
                              }
                            ]
                          }
                        }
                      },
                      "testJobTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "18"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "userAge",
                                "value": "21"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job creation successfull.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobPid": {
                      "type": "number",
                      "example": 57
                    },
                    "message": {
                      "example": "Test job created and queued for execution."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User does not have authorization",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "invalidUser": {
                    "summary": "Invalid user",
                    "value": {
                      "error": "User does not exist."
                    }
                  },
                  "invalidCreds": {
                    "summary": "Unauthorized access",
                    "value": {
                      "error": "User not Authorized."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request Error",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "ScnPidMissing": {
                    "summary": "Scn Pid missing",
                    "value": {
                      "error": "Scn Pid is required for scenario run."
                    }
                  },
                  "testSuitePidMissing": {
                    "summary": "Test suite Pid missing",
                    "value": {
                      "error": "TestSuite Pid is required for test suite run."
                    }
                  },
                  "invalidPurpose": {
                    "summary": "Purpose character limit exceeded",
                    "value": {
                      "error": "Maximum of 256 characters are allowed in purpose"
                    }
                  },
                  "appEnvironmentName": {
                    "summary": "appEnvironmentName missing",
                    "value": {
                      "error": "App Environment is required to create test job."
                    }
                  },
                  "invalidScreenshotMode": {
                    "summary": "Screenshot mode is invalid",
                    "value": {
                      "error": "Screenshot mode is invalid. Accepted values are : 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                    }
                  },
                  "invalidLoggerLevel": {
                    "summary": "Invalid logger level",
                    "value": {
                      "error": "Invalid logger level provided. Allowed values are : 'STANDARD','VERBOSE','ON_ERROR'."
                    }
                  },
                  "invalidPageTimeout": {
                    "summary": "Page load timeout out of range",
                    "value": {
                      "error": "Allowed range for page load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidElementTimeout": {
                    "summary": "Element load timeout out of range",
                    "value": {
                      "error": "Allowed range for element load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidApiTimeout": {
                    "summary": "API timeout out of range",
                    "value": {
                      "error": "Allowed range for API timeout is from 0 to 300 seconds."
                    }
                  },
                  "agentInfoMissing": {
                    "summary": "Agent Info required",
                    "value": {
                      "error": "Agent Info is required."
                    }
                  },
                  "InvalidAgentSelectionType": {
                    "summary": "Agent Selection Type is required",
                    "value": {
                      "error": "Agent Selection Type is required. Accepted values are : 'BY_NAME', 'BY_AVAILABILITY'."
                    }
                  },
                  "agentNamesRequired": {
                    "summary": "agent names required",
                    "value": {
                      "error": "AgentNames list is required with AgentSelectionType as 'BY_NAME'."
                    }
                  },
                  "agentNameInvalid": {
                    "summary": "Agent name invalid",
                    "value": "Agent with name 'Prod_Agent' is not a running instance."
                  },
                  "invalidAgentCount": {
                    "summary": "Invalid agent Count for job distribution",
                    "value": "agentCountForJobDistribution must be greater than or equal to 1."
                  },
                  "invalidNotificationMode": {
                    "summary": "Invalid notification mode",
                    "value": {
                      "error": "Invalid notification mode. Accepted values are 'NONE','ALWAYS', 'ON ERROR'."
                    }
                  },
                  "maxRerunAttempsInvalid": {
                    "summary": "Invalid maxRerunAttempts",
                    "value": {
                      "error": "The allowed range for maxRerunAttempts is from 1 to 9."
                    }
                  },
                  "invalidFailurePercentageLimit": {
                    "summary": "Invalid failure Percentage limit",
                    "value": {
                      "error": "The allowed range for failurePercentageLimit is from 0 to 99."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "examples": {
                  "scenarioNotFound": {
                    "summary": "Scenario not found",
                    "value": {
                      "error": "Scenario with Pid 15 does not exists in the project."
                    }
                  },
                  "testSuiteNotFound": {
                    "summary": "Test suite not found",
                    "value": {
                      "error": "Test suite with pid 9 does not exists in the project."
                    }
                  },
                  "appEnvironmentNotFound": {
                    "summary": "App Environment not found",
                    "value": {
                      "error": "App Environment with name 'Staging' does not exists in the project."
                    }
                  },
                  "runPropertyNotFound": {
                    "summary": "Run Property not found",
                    "value": {
                      "error": "Run Property with name 'TotalTests' does not exists in the project."
                    }
                  },
                  "ExecutionParameterNotFound": {
                    "summary": "Execution Parameter not found",
                    "value": {
                      "error": "Execution Paramter with name 'platform' does not exists in the project."
                    }
                  },
                  "agentNotFound": {
                    "summary": "Agent not found",
                    "value": {
                      "error": "Agent with name 'Prod_agent' is not a running instance."
                    }
                  },
                  "webDriverNotFound": {
                    "summary": "Web driver Profile not found",
                    "value": {
                      "error": "Web driver Profile with name 'Driver profile 1' does not exists in the project."
                    }
                  },
                  "mobileDriverNotFound": {
                    "summary": "Mobile driver profile not found",
                    "value": {
                      "error": "Mobile driver profile with name 'Driver profile 3' does not exists in the project."
                    }
                  },
                  "emulatedDeviceNotfound": {
                    "summary": "Emulated device not found",
                    "value": {
                      "error": "Emulated device with name 'Android Phone 393 x 799' does not exists in the project."
                    }
                  },
                  "slackChannelNotFound": {
                    "summary": "Slack channel not found",
                    "value": {
                      "error": "Slack channel with name 'Slack channel 1' does not configured to this project."
                    }
                  },
                  "teamsChannelNotFound": {
                    "summary": "Teams channel not found",
                    "value": {
                      "error": "Teams channel with name 'QA-team' does not configured to this project."
                    }
                  },
                  "teardownTjCompNotFound": {
                    "summary": "TearDown action does not exist",
                    "value": {
                      "error": "Tear down Action with pid : 25 does not exists in the project."
                    }
                  },
                  "globalPropertyNotFound": {
                    "summary": "Global Property not found.",
                    "value": {
                      "error": "Global property with name 'GP 1' does not exist in the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/test-exec/jobs/templates": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get all Template Test Jobs",
        "description": "This API retrieves a comprehensive list of all template jobs that have been created and associated with a specific project.",
        "operationId": "getTemplateTestJobs",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "description": "Number of items per page (Maximum: 100).",
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with a list of template jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 3
                    },
                    "totalCount": {
                      "type": "integer",
                      "example": 21
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "jobPid": {
                            "type": "integer",
                            "example": 14
                          },
                          "purpose": {
                            "type": "string",
                            "example": "Fund Transfer"
                          },
                          "runEntityType": {
                            "type": "string",
                            "example": "SCENARIO"
                          },
                          "entityPid": {
                            "type": "number",
                            "example": 7
                          },
                          "createdUser": {
                            "type": "string",
                            "nullable": true,
                            "example": "demo@acmeInc.com"
                          },
                          "createdTimestamp": {
                            "type": "number",
                            "example": "1736507047"
                          }
                        }
                      },
                      "example": [
                        {
                          "jobPid": 5,
                          "purpose": "Fund Transfer Testing",
                          "runEntityPid": "SCENARIO",
                          "entityPid": 42,
                          "createdUser": "Demo@acmeInc.com",
                          "createdTimestamp": "1736507047"
                        },
                        {
                          "jobPid": 51,
                          "purpose": "Ticket booking Testing",
                          "runEntityPid": "TEST_SUITE",
                          "entityPid": 7,
                          "createdUser": "Demo2@acmeInc.com",
                          "createdTimestamp": "1736587647"
                        },
                        {
                          "jobPid": 67,
                          "purpose": "Screenshot testing",
                          "runEntityPid": "SCENARIO",
                          "entityPid": 2,
                          "createdUser": "Demo1@acmeInc.com",
                          "createdTimestamp": "1733457047"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to fetch template Jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User do not have authorization to access this feature."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Project not found.",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "error": "Project with code 'proj123' not found."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Jobs"],
        "summary": "Create a new Template Test Job",
        "description": "Creates a new template test job for the specified project using the provided job configuration. This does not execute the job but serves as a template that stores the job configurations. Actual job runs can be triggered externally as needed, using the job ID of the template created by this API.",
        "operationId": "createTemplateTestJob",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "runEntityType": {
                    "type": "string",
                    "enum": ["SCENARIO", "TEST_SUITE"],
                    "description": "Specifies the type of entity to be run. Accepted values are 'SCENARIO', 'TEST_SUITE'."
                  },
                  "scnPid": {
                    "type": "number",
                    "example": "15",
                    "description": "The PID of the scenario to be executed. This is a mandatory field when runEntity is set to SCENARIO and must reference an existing scenario in the project."
                  },
                  "testSuitePid": {
                    "type": "number",
                    "example": null,
                    "description": "The PID of the test suite to be executed. This is a mandatory field when runEntity is set to TEST_SUITE and must reference an existing test suite in the project."
                  },
                  "purpose": {
                    "type": "string",
                    "example": "ACME INC ticket booking.",
                    "description": "Specifies the purpose of job creation. Defaults to the scenario name or test suite name if not explicitly provided."
                  },
                  "appEnvironmentName": {
                    "type": "string",
                    "example": "Staging",
                    "description": "Name of the environment where test execution to take place. Must reference to an existing app environment in the project."
                  },
                  "screenshotMode": {
                    "type": "string",
                    "example": "OPTIMAL",
                    "description": "Specifies the mode to capture screenshot during test execution. Accepted values are 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                  },
                  "loggerLevel": {
                    "type": "string",
                    "example": "STANDARD",
                    "description": "Specifiesthe mode to log the event during test execution. Accepted values are 'STANDARD', 'VERBOSE','ERROR'."
                  },
                  "runProperties": {
                    "type": "object",
                    "properties": {
                      "todayPrice": {
                        "type": "string",
                        "example": "2000"
                      },
                      "totalTest": {
                        "type": "string",
                        "example": "5"
                      }
                    },
                    "description": "Specifies run properties json associated to the scenario with name of run property as the key and value as assigned corresponding run property value."
                  },
                  "executionParameters": {
                    "type": "object",
                    "properties": {
                      "retryCount": {
                        "type": "string",
                        "example": 2
                      },
                      "platform": {
                        "type": "string",
                        "example": "windows"
                      }
                    },
                    "description": "Specifies executionParameters associated to the project with name of execution parameter name as the key and value as assigned corresponding parameter value."
                  },
                  "timeOuts": {
                    "type": "object",
                    "properties": {
                      "pageLoadWaitTime": {
                        "type": "number",
                        "example": "50",
                        "description": "Maximum wait time (in seconds) for page or screen load. Defaults to 60 seconds if not provided."
                      },
                      "elementWaitTime": {
                        "type": "number",
                        "example": "40",
                        "description": "Maximum wait time (in seconds) for an element to render on screen. Defaults to 30 seconds if not provided."
                      },
                      "apiTimeout": {
                        "type": "number",
                        "example": "60",
                        "description": "Maximum wait time (in seconds) for each call in API tests. Defaults to 60 seconds if not provided."
                      }
                    }
                  },
                  "agentInfo": {
                    "type": "object",
                    "properties": {
                      "agentSelectionType": {
                        "type": "string",
                        "example": "BY_AVAILABILITY",
                        "enum": ["BY_NAME", "BY_AVAILABILITY"],
                        "description": "Defines the mode for selecting an agent for test execution.Allowed values are : 'BY_NAME','BY_AVAILABILITY'. Remote vendor test execution is not supported with agentSelectionType as 'BY_AVAILABILITY'."
                      },
                      "agentNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["PROD_agent-1", "PROD_agent-2"],
                        "description": "Specifies the names list of the agents to be used for test execution. The provided names must correspond to a running agent. mandatory with agentSelectionType as 'BY_NAME'."
                      },
                      "agentByAvailabilityInfo": {
                        "type": "object",
                        "properties": {
                          "namePattern": {
                            "type": "string",
                            "example": null,
                            "description": "Specifies the pattern to match any agent, any of available agents which matches the pattern will pick the job for execution."
                          },
                          "agentCountForJobDistribution": {
                            "type": "number",
                            "example": 3,
                            "description": "Specifies number of Agents to distribute the job. Defaults to 1 if not provided."
                          }
                        }
                      },
                      "numOfParallelRuns": {
                        "type": "number",
                        "example": 2,
                        "description": "Specifies the number of parallel test cases to run on the agent. Defaults to 1 if not provided."
                      },
                      "browserExecution": {
                        "type": "object",
                        "properties": {
                          "browser": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "EDGE",
                                "description": "Specifies the browser for test execution. Defaults to CHROME if not provided."
                              },
                              "version": {
                                "type": "string",
                                "example": "12.54"
                              }
                            }
                          },
                          "targetDeviceType": {
                            "type": "string",
                            "enum": ["DESKTOP", "MOBILE"],
                            "example": "MOBILE",
                            "description": "Specifies the device type on which browser execution to happen."
                          },
                          "desktopDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "11",
                                "description": "Version of the operating system of execution environment."
                              },
                              "emulatedDeviceName": {
                                "type": "string",
                                "example": "Android Phone 393 x 851",
                                "description": "Specifies the name of the device to emulate with desired resolution."
                              }
                            },
                            "example": null
                          },
                          "mobileDevice": {
                            "type": "object",
                            "properties": {
                              "os": {
                                "type": "string",
                                "example": "iOS",
                                "description": "Operating system of the execution environment."
                              },
                              "osVersion": {
                                "type": "string",
                                "example": "15",
                                "description": "Version of the operating system of execution environment."
                              },
                              "deviceName": {
                                "type": "string",
                                "example": "iPhone 15 Pro",
                                "description": "Name of the mobile device to test on mobile browser."
                              },
                              "udid": {
                                "type": "string",
                                "description": "Unique device identifier id of the connected device. Mandatory when connected to mobile device and can be located in the agent dashboard once the device is physically connected.",
                                "example": "1d97ec4fa8ae99f00e07f9c913c368cf6071a978"
                              },
                              "isRealDevice": {
                                "type": "boolean",
                                "example": "true"
                              },
                              "webDriverAgentUrl": {
                                "type": "string",
                                "example": null,
                                "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system and can be located in the agent dashboard once the device is physically connected."
                              }
                            }
                          },
                          "browserKeepAlive": {
                            "type": "boolean",
                            "example": true,
                            "description": "Specifies whether to keep the browser session alive during test execution or not. Defaults to false if not provided."
                          },
                          "enableWebAccessibilityTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Verifies accessibility compliance of different application pages according to established standards. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "enableWebPerformanceTesting": {
                            "type": "boolean",
                            "example": "true",
                            "description": "Measures and verifies web performance of different application pages to be satisfactory as per the established baseline. This is automatically invoked as the test application navigates through different pages during the execution of automation test cases."
                          },
                          "webPerformanceSlaThreshold": {
                            "type": "number",
                            "example": "10",
                            "description": "SLA Tolerance can be specified to account for environment-specific performance differences in different application environments where the test is executing. Defaults to 0 if not provided."
                          },
                          "webDriverProfileName": {
                            "type": "string",
                            "example": "Web Driver Profile 1",
                            "description": "Provide custom browser configurations to invoke browser. If provided then it must reference to existing web driver profile in the project."
                          }
                        }
                      },
                      "mobileAppTesting": {
                        "type": "object",
                        "properties": {
                          "mobileExecutionDevices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "refName": {
                                  "type": "string",
                                  "example": "device 1",
                                  "description": "Name of the device to reference the device used in the Scenario steps with multi device testing. Mandatory with multiple devices."
                                },
                                "deviceName": {
                                  "type": "string",
                                  "example": "Iphone 15",
                                  "description": "name of device."
                                },
                                "os": {
                                  "type": "string",
                                  "example": "ios",
                                  "description": "operating system of the mobile device."
                                },
                                "osVersion": {
                                  "example": "15",
                                  "description": "Os Version of mobile device."
                                },
                                "appiumDriverUrl": {
                                  "type": "string",
                                  "example": "http://localhost:4723",
                                  "description": "url of the appium server. Required for mobile testing."
                                },
                                "webDriverAgentUrl": {
                                  "type": "string",
                                  "example": "127.0.0.1:50092",
                                  "description": "Server url of web driver agent. Mandatory with local execution on IOS operating system."
                                }
                              }
                            },
                            "exmaples": [
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              },
                              {
                                "refName": "Android 10",
                                "deviceName": "Pixel 4",
                                "os": "Andriod",
                                "osVersion": 13,
                                "appiumDriverUrl": "http://localhost:4723"
                              }
                            ]
                          },
                          "mobileDriverProfileName": {
                            "type": "string",
                            "example": "Mobile Driver Profile 3",
                            "description": "Provides custom testing environment configurations with mobile testing. If provided then it must reference to existing mobile driver profile in the project."
                          },
                          "mobileKeepAlive": {
                            "type": "boolean",
                            "example": false,
                            "description": "Specifies whether to keep the mobile session alive during test execution or not. Defaults to false if not provided."
                          },
                          "skipReinstall": {
                            "type": "boolean",
                            "example": "false",
                            "description": "By enabling this option, AccelQ skips the installation process if the app is already installed on the device. Default value is false."
                          }
                        }
                      }
                    }
                  },
                  "enableSelfHealing": {
                    "type": "boolean",
                    "example": true,
                    "description": "Enables self healing on element ID failures. Default value is true."
                  },
                  "notifications": {
                    "type": "object",
                    "properties": {
                      "notifyOnStart": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notifyOnCompletion": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates whether an email notification should be sent when the test execution begins."
                      },
                      "notificationMode": {
                        "type": "string",
                        "example": "ON ERROR",
                        "description": "Specifies the case where notification email to be sent. Accepted values are 'NONE','ALWAYS','ON ERROR'. Defaults to 'NONE' if not provided."
                      },
                      "notificationEmails": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["demo1@acmeInc.com", "demo2@acmeInc.com"]
                      },
                      "notificationChannels": {
                        "type": "object",
                        "properties": {
                          "slackChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["Slack-channel-1"]
                          },
                          "teamsChannels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": ["QA-Team", "PKN-team"]
                          }
                        }
                      }
                    }
                  },
                  "autoRerun": {
                    "type": "object",
                    "properties": {
                      "failurePercentageLimit": {
                        "type": "number",
                        "example": "10",
                        "description": "Specifies the threshold failure percentage to trigger an auto re-run."
                      },
                      "maxRerunAttempts": {
                        "type": "number",
                        "example": 5,
                        "description": "Specifies total number of maximum reruns attempts."
                      },
                      "delayBetweenRerun": {
                        "type": "number",
                        "example": 3,
                        "description": "Specifies delay between each Re-run attempt in minutes."
                      },
                      "rerunOnNoImprovement": {
                        "type": "boolean",
                        "example": false,
                        "description": "Indicates whether to rerun or not if previous rerun has no improvement."
                      }
                    }
                  },
                  "setup": {
                    "type": "object",
                    "properties": {
                      "testCaseSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "14"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "configPath",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "/configs/settings.json",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "configPath",
                                "valueType": "LITERAL",
                                "value": "/configs/settings.json"
                              },
                              {
                                "name": "maxRetries",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 2"
                              }
                            ]
                          }
                        }
                      },
                      "testJobSetup": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "19"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "retryCount",
                                  "description": "Name of the action input parameter of the setup action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "3",
                                  "description": "Stores the values to be assigned to the action input parameter."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "retryCount",
                                "value": "3"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "teardown": {
                    "type": "object",
                    "properties": {
                      "testCaseTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "13"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "filePath",
                                "valueType": "LITERAL",
                                "value": "/users/data.csv"
                              },
                              {
                                "name": "transactionLimit",
                                "valueType": "GLOBAL_PROPERTY",
                                "value": "GP 1"
                              }
                            ]
                          }
                        }
                      },
                      "testJobTeardown": {
                        "type": "object",
                        "properties": {
                          "actionPid": {
                            "type": "number",
                            "example": "18"
                          },
                          "actionInputParams": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "filePath",
                                  "description": "Name of the action input parameter of the teardown action."
                                },
                                "valueType": {
                                  "type": "string",
                                  "example": "LITERAL",
                                  "description": "Specifies the type of value to be assigned to action input parameter. Accepted values are 'LITERAL','GLOBAL_PROPERTY'. Defaults to 'LITERAL' if not provided."
                                },
                                "value": {
                                  "type": "string",
                                  "example": "users/data.csv",
                                  "description": "Stores the values to be assigned to the action input parameter. When the valueType is 'LITERAL', it directly stores the actual value. If the valueType is 'GLOBAL_PROPERTY', this field stores the name of the corresponding global property."
                                }
                              }
                            },
                            "example": [
                              {
                                "name": "userAge",
                                "value": "21"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job creation successfull.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobPid": {
                      "type": "number",
                      "example": 42
                    },
                    "message": {
                      "example": "Template Job created successfully."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User does not have authorization",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "invalidUser": {
                    "summary": "Invalid user",
                    "value": {
                      "error": "User does not exist."
                    }
                  },
                  "invalidCreds": {
                    "summary": "Unauthorized access",
                    "value": {
                      "error": "User not Authorized."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request Error",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "invalidRunEntityType": {
                    "summary": "Invalid Run Entity Type",
                    "value": {
                      "error": "Invalid runEntityType provided. Accepted values are : 'SCENARIO', 'TEST_SUITE'."
                    }
                  },
                  "ScnPidMissing": {
                    "summary": "Scn Pid missing",
                    "value": {
                      "error": "Scn Pid is required for scenario run."
                    }
                  },
                  "testSuitePidMissing": {
                    "summary": "Test suite Pid missing",
                    "value": {
                      "error": "TestSuite Pid is required for test suite run."
                    }
                  },
                  "invalidPurpose": {
                    "summary": "Purpose character limit exceeded",
                    "value": {
                      "error": "Maximum of 256 characters are allowed in purpose"
                    }
                  },
                  "appEnvironmentName": {
                    "summary": "appEnvironmentName missing",
                    "value": {
                      "error": "App Environment is required to create test job."
                    }
                  },
                  "invalidScreenshotMode": {
                    "summary": "Screenshot mode is invalid",
                    "value": {
                      "error": "Screenshot mode is invalid. Accepted values are : 'NONE', 'OPTIMAL', 'COMPREHENSIVE', 'ON_ERROR'."
                    }
                  },
                  "invalidLoggerLevel": {
                    "summary": "Invalid logger level",
                    "value": {
                      "error": "Invalid logger level provided. Allowed values are : 'STANDARD','VERBOSE','ON_ERROR'."
                    }
                  },
                  "invalidPageTimeout": {
                    "summary": "Page load timeout out of range",
                    "value": {
                      "error": "Allowed range for page load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidElementTimeout": {
                    "summary": "Element load timeout out of range",
                    "value": {
                      "error": "Allowed range for element load wait time is from 0 to 300 seconds."
                    }
                  },
                  "invalidApiTimeout": {
                    "summary": "API timeout out of range",
                    "value": {
                      "error": "Allowed range for API timeout is from 0 to 300 seconds."
                    }
                  },
                  "agentInfoMissing": {
                    "summary": "Agent Info required",
                    "value": {
                      "error": "Agent Info is required."
                    }
                  },
                  "InvalidAgentSelectionType": {
                    "summary": "Agent Selection Type is required",
                    "value": {
                      "error": "Agent Selection Type is required. Accepted values are : 'BY_NAME', 'BY_AVAILABILITY'."
                    }
                  },
                  "agentNamesRequired": {
                    "summary": "agent names required",
                    "value": {
                      "error": "AgentNames list is required with AgentSelectionType as 'BY_NAME'."
                    }
                  },
                  "agentNameInvalid": {
                    "summary": "Agent name invalid",
                    "value": "Agent with name 'Prod_Agent' is not a running instance."
                  },
                  "invalidAgentCount": {
                    "summary": "Invalid agent Count for job distribution",
                    "value": "agentCountForJobDistribution must be greater than or equal to 1."
                  },
                  "invalidNotificationMode": {
                    "summary": "Invalid notification mode",
                    "value": {
                      "error": "Invalid notification mode. Accepted values are 'NONE','ALWAYS', 'ON ERROR'."
                    }
                  },
                  "maxRerunAttempsInvalid": {
                    "summary": "Invalid maxRerunAttempts",
                    "value": {
                      "error": "The allowed range for maxRerunAttempts is from 1 to 9."
                    }
                  },
                  "invalidFailurePercentageLimit": {
                    "summary": "Invalid failure Percentage limit",
                    "value": {
                      "error": "The allowed range for failurePercentageLimit is from 0 to 99."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "examples": {
                  "scenarioNotFound": {
                    "summary": "Scenario not found",
                    "value": {
                      "error": "Scenario with Pid 15 does not exists in the project."
                    }
                  },
                  "testSuiteNotFound": {
                    "summary": "Test suite not found",
                    "value": {
                      "error": "Test suite with pid 9 does not exists in the project."
                    }
                  },
                  "appEnvironmentNotFound": {
                    "summary": "App Environment not found",
                    "value": {
                      "error": "App Environment with name 'Staging' does not exists in the project."
                    }
                  },
                  "runPropertyNotFound": {
                    "summary": "Run Property not found",
                    "value": {
                      "error": "Run Property with name 'TotalTests' does not exists in the project."
                    }
                  },
                  "ExecutionParameterNotFound": {
                    "summary": "Execution Parameter not found",
                    "value": {
                      "error": "Execution Paramter with name 'platform' does not exists in the project."
                    }
                  },
                  "agentNotFound": {
                    "summary": "Agent not found",
                    "value": {
                      "error": "Agent with name 'Prod_agent' is not a running instance."
                    }
                  },
                  "webDriverNotFound": {
                    "summary": "Web driver Profile not found",
                    "value": {
                      "error": "Web driver Profile with name 'Driver profile 1' does not exists in the project."
                    }
                  },
                  "mobileDriverNotFound": {
                    "summary": "Mobile driver profile not found",
                    "value": {
                      "error": "Mobile driver profile with name 'Driver profile 3' does not exists in the project."
                    }
                  },
                  "emulatedDeviceNotfound": {
                    "summary": "Emulated device not found",
                    "value": {
                      "error": "Emulated device with name 'Android Phone 393 x 799' does not exists in the project."
                    }
                  },
                  "slackChannelNotFound": {
                    "summary": "Slack channel not found",
                    "value": {
                      "error": "Slack channel with name 'Slack channel 1' does not configured to this project."
                    }
                  },
                  "teamsChannelNotFound": {
                    "summary": "Teams channel not found",
                    "value": {
                      "error": "Teams channel with name 'QA-team' does not configured to this project."
                    }
                  },
                  "teardownTjCompNotFound": {
                    "summary": "TearDown action does not exist",
                    "value": {
                      "error": "Tear down Action with pid : 25 does not exists in the project."
                    }
                  },
                  "globalPropertyNotFound": {
                    "summary": "Global Property not found.",
                    "value": {
                      "error": "Global property with name 'GP 1' does not exist in the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/test-exec/jobs/templates/{templateJobId}/run": {
      "post": {
        "tags": ["Jobs"],
        "summary": "Instantiates a run from the template job",
        "description": "This API Instantiates a new job run by applying the configuration associated with the provided template job ID.",
        "operationId": "templateTestJobRun",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          },
          {
            "name": "templateJobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "Job Id of the template job to be executed."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "runProperties": {
                    "type": "object",
                    "example": {
                      "totalTickets": "10",
                      "maxPrice": "4000"
                    },
                    "description": "Specifies run properties json associated to the scenario with name of run property as the key and value as assigned corresponding run property value."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobPid": {
                      "type": "number",
                      "example": 89
                    },
                    "templateJobPid": {
                      "type": "number",
                      "example": 77
                    },
                    "message": {
                      "example": "Job run successfully created using the provided template job ID."
                    }
                  }
                }
              }
            },
            "description": "Template Job triggered"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "templateJobNotFound": {
                    "summary": "Template job found",
                    "value": {
                      "error": "Template job with pid : 31 does not exist in the project."
                    }
                  }
                }
              }
            },
            "description": "Template job not found."
          }
        }
      }
    },
    "/test-exec/runs/manual/{runPid}/tc-summary-by-users": {
      "get": {
        "tags": ["Runs"],
        "summary": "Fetch test case status summary by users of manul test run ",
        "description": "It fetches summary of all test cases status updated by each user for a specific test run. It helps tracking user-wise contributions and changes made during that run.",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Login username (email)"
          },
          {
            "name": "api_key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key of the user for authentication"
          },
          {
            "name": "runPid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "Run pid of the manul run executed."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user-wise updated test case summaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "updatedUserPid": {
                        "type": "number",
                        "nullable": true,
                        "description": "pid of the user updated the test case status. Null if the test status not updated by any user.",
                        "example": 10
                      },
                      "updatedUserName": {
                        "type": "string",
                        "example": "John Doe",
                        "description": "Name of the user updated the test case status. Unassigned if the test status not updated by any user."
                      },
                      "updatedTestCases": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "testCaseName": {
                              "type": "string",
                              "example": "TC1"
                            },
                            "scenarioName": {
                              "type": "string",
                              "example": "SCN Manul"
                            },
                            "status": {
                              "type": "string",
                              "example": "NOT_COMPLETED"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "summary": "Multiple user test case summaries",
                    "value": [
                      {
                        "updatedUserPid": null,
                        "updatedUserName": "UnAssigned",
                        "updatedTestCases": [
                          {
                            "testCaseName": "TC2",
                            "scenarioName": "Release Inspection",
                            "status": "NOT_COMPLETED"
                          },
                          {
                            "testCaseName": "TC4",
                            "scenarioName": "Release Inspection",
                            "status": "NOT_COMPLETED"
                          }
                        ]
                      },
                      {
                        "updatedUserPid": 123,
                        "updatedUserName": "John Doe",
                        "updatedTestCases": [
                          {
                            "testCaseName": "TC2",
                            "scenarioName": "Release Inspection",
                            "status": "COMPLETED"
                          }
                        ]
                      },
                      {
                        "updatedUserPid": 456,
                        "updatedUserName": "Jane Smith",
                        "updatedTestCases": [
                          {
                            "testCaseName": "TC3",
                            "scenarioName": "Release Inspection",
                            "status": "IN_PROGRESS"
                          },
                          {
                            "testCaseName": "TC4",
                            "scenarioName": "Release Inspection",
                            "status": "SKIPPED"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
